# -*- encoding: utf-8 -*-
'''
今天内容介绍:
1. 作业
    要点:
        1. 封装，对象中嵌套的对象
        2. pickle, load: 切记，如果是对象，一定要先导入相关的类
2. 上节内容回顾和补充
    面向对象基本知识:
        1. 类和对象的关系
        2. 三大特性:
            封装
            继承

    面向对象第三大特性:
        3. 多态
          def func(arg):
             print(arg)

          func(1)
          func('jqx')
          func([11, 22, 33])

          C#/Java: 可以使用类的继承关系来表现多态
          void func(int arg){
                print(arg);
          }

          func(123)
          func('jqx') # 报错

          Class A:
                pass

          Class B(A):
                pass

          Class C(A):
                pass

          # arg参数: 必须是A类型或者A的子类类型
          def func(A arg):
                print(arg)

          #obj = B()
          #obj = C()
          obj = A()
          func(obj)

3. 面向对象中 类成员
    字段:
        静态字段
        普通字段
        PS: 静态字段在代码加载的时候, 已经创建
    方法:
        所有的方法属于类
        1. 普通方法: 至少有一个self, 通过对象执行
        2. 静态方法: 任意参数(可有可无), 由类执行(其实也可以用对象去执行但不推荐)
        3. 类方法: 至少有一个cls， 由类执行(其实也可以用对象去执行但不推荐)
    属性:
        不伦不类的东西，具有方法的表现形式，具有字段的访问形式
        也可以说属性提供了一种关联方式，具体做什么都是自己在方法中定义的。

4. 成员修饰符
    私有:
        只能类本身成员内部可以访问
    公有:
        正常访问
    PS: python变态，说是分私有公有，但是其实，我们可以通过'对象._类名私有变量名'去访问私有变量（不推荐）
        不到万不得已，不要在外部强制访问私有变量
5. 特殊成员
    __init__
    __doc__
    __call__
    __setitem__
    ...
6. 面向对象其他
        -- isinstance
        -- issubclass
        -- 继承: 2.7
        -- 应用:
            自定义类型, 对字典进行补充，有序字典
            源码的扩展

7. 异常处理
8. 设计模式之单例模式(23种，推荐书: goF设计模式)
    单例模式:
        用来创建单个实例
    类方法
    静态方法
'''